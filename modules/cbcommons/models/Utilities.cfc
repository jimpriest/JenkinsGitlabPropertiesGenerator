<!-----------------------------------------------------------------------********************************************************************************Copyright Since 2005 ColdBox Framework by Luis Majano and Ortus Solutions, Corpwww.coldbox.org | www.luismajano.com | www.ortussolutions.com********************************************************************************Author 	 :	Luis MajanoDescription :	A static utility of util methods-----------------------------------------------------------------------><cfcomponent hint="This is a Utilities CFC" output="false" singleton><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cffunction name="init" access="public" returntype="Utilities" output="false">		<cfscript>			return this;		</cfscript>	</cffunction><!------------------------------------------- UTILITY METHODS ------------------------------------------->	<!--- queryStringToStruct --->	<cffunction name="queryStringToStruct" output="false" returntype="struct" hint="Converts a querystring into a struct of name value pairs">		<cfargument name="qs" type="string" required="true" default="" hint="The query string"/>		<cfscript>			var i 		 = 1;			var results  = structnew();			var thisVal  = "";			// If conventions found, continue parsing			for(i=1; i lte listLen(arguments.qs,"&"); i=i+1){				thisVal = listGetAt(arguments.qs,i,"&");				// Parse it out				results[ getToken(thisVal,1,"=") ] = getToken(thisVal,2,"=");			}//end loop over pairs			return results;		</cfscript>	</cffunction>	<!--- isCFUUID --->	<cffunction name="isCFUUID" output="false" returntype="boolean" hint="Checks if a passed string is a valid UUID.">		<cfargument name="inStr" type="string" required="true" />		<cfreturn reFindNoCase("^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{16}$", inStr) />	</cffunction>	<!--- isSSL --->	<cffunction name="isSSL" output="false" returntype="boolean" hint="Tells you if you are in SSL mode or not.">		<cfscript>			if( isBoolean(cgi.server_port_secure) and cgi.server_port_secure ){				return true;			}			else{				return false;			}		</cfscript>	</cffunction>	<!--- sleeper --->	<cffunction name="sleeper" access="public" returntype="void" output="false" hint="Make the main thread of execution sleep for X amount of seconds.">		<cfargument name="milliseconds" type="numeric" required="yes" hint="Milliseconds to sleep">		<cfset CreateObject("java", "java.lang.Thread").sleep(arguments.milliseconds)>	</cffunction>	<!--- placeHolderReplacer --->	<cffunction name="placeHolderReplacer" access="public" returntype="any" hint="PlaceHolder Replacer for strings containing ${} patterns" output="false" >		<!---************************************************************************************************ --->		<cfargument name="str" 		required="true" type="any" hint="The string variable to look for replacements">		<cfargument name="settings" required="true" type="any" hint="The structure of settings to use in replacing">		<!---************************************************************************************************ --->		<cfscript>			var returnString = arguments.str;			var regex = "\$\{([0-9a-z\-\.\_]+)\}";			var lookup = 0;			var varName = 0;			var varValue = 0;			/* Loop and Replace */			while(true){				/* Search For Pattern */				lookup = reFindNocase(regex,returnString,1,true);				/* Found? */				if( lookup.pos[1] ){					/* Get Variable Name From Pattern */					varName = mid(returnString,lookup.pos[2],lookup.len[2]);					/* Lookup Value */					if( structKeyExists(arguments.settings,varname) ){						varValue = arguments.settings[varname];					}					else if( isDefined("arguments.settings.#varName#") ){						varValue = Evaluate("arguments.settings.#varName#");					}					else{						varValue = "VAR_NOT_FOUND";					}					/* Remove PlaceHolder Entirely */					returnString = removeChars(returnString, lookup.pos[1], lookup.len[1]);					/* Insert Var Value */					returnString = insert(varValue, returnString, lookup.pos[1]-1);				}				else{					break;				}			}			/* Return Parsed String. */			return returnString;		</cfscript>	</cffunction></cfcomponent>